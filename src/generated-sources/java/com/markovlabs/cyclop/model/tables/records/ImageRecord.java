/**
 * This class is generated by jOOQ
 */
package com.markovlabs.cyclop.model.tables.records;


import com.markovlabs.cyclop.model.tables.Image;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record3<Long, String, byte[]> {

	private static final long serialVersionUID = -50067845;

	/**
	 * Setter for <code>cyclopdb.IMAGE.ID</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>cyclopdb.IMAGE.ID</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>cyclopdb.IMAGE.IMAGE_PATH</code>.
	 */
	public void setImagePath(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>cyclopdb.IMAGE.IMAGE_PATH</code>.
	 */
	public String getImagePath() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>cyclopdb.IMAGE.IMAGE</code>.
	 */
	public void setImage(byte[] value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>cyclopdb.IMAGE.IMAGE</code>.
	 */
	public byte[] getImage() {
		return (byte[]) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, byte[]> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, byte[]> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Image.IMAGE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Image.IMAGE.IMAGE_PATH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field3() {
		return Image.IMAGE.IMAGE_;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getImagePath();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value3() {
		return getImage();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ImageRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ImageRecord value2(String value) {
		setImagePath(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ImageRecord value3(byte[] value) {
		setImage(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ImageRecord values(Long value1, String value2, byte[] value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ImageRecord
	 */
	public ImageRecord() {
		super(Image.IMAGE);
	}

	/**
	 * Create a detached, initialised ImageRecord
	 */
	public ImageRecord(Long id, String imagePath, byte[] image) {
		super(Image.IMAGE);

		setValue(0, id);
		setValue(1, imagePath);
		setValue(2, image);
	}
}
